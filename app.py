# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nRKz4E83cbhZE5Z7tdSeW1JnYF4FYIpR
"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the trained Random Forest model and scaler
model = joblib.load("machine_health_model.pkl")  # Ensure this file is in the same directory
scaler = joblib.load("scaler.pkl")

# Streamlit App Title
st.title("üîß Machine Health Monitoring Dashboard")
st.write("Enter sensor values below to predict machine health status.")

# Sidebar for user input
st.sidebar.header("Enter Sensor Values")

# Input fields for manual entry
vibration = st.sidebar.number_input("Vibration (mm/s RMS)", min_value=0.0, max_value=10.0, value=2.5, step=0.1)
temperature = st.sidebar.number_input("Temperature (¬∞C)", min_value=20, max_value=100, value=50, step=1)
spindle_speed = st.sidebar.number_input("Spindle Speed (RPM)", min_value=2500, max_value=3500, value=3000, step=10)

# Convert inputs into model-compatible format
input_data = np.array([[vibration, temperature, spindle_speed]])
input_scaled = scaler.transform(input_data)

# Predict machine health
prediction = model.predict(input_scaled)
status_dict = {0: "üü¢ Healthy", 1: "üü† Warning", 2: "üî¥ Critical Failure"}
predicted_status = status_dict[prediction[0]]

# Display prediction
st.subheader("Prediction Result")
st.write(f"**Machine Health Status: {predicted_status}**")

# Visualization Section
st.subheader("Sensor Data Visualization")

# Create a DataFrame for visualization
sensor_data = pd.DataFrame({
    "Parameter": ["Vibration", "Temperature", "Spindle Speed"],
    "Value": [vibration, temperature, spindle_speed]
})

# Bar chart for sensor values
fig, ax = plt.subplots(figsize=(6, 4))
sns.barplot(x="Parameter", y="Value", data=sensor_data, palette="coolwarm", ax=ax)
ax.set_ylabel("Sensor Values")
st.pyplot(fig)

# Display a warning message if the machine is in a critical state
if prediction[0] == 2:
    st.error("‚ö†Ô∏è Critical Failure Detected! Immediate action required.")
elif prediction[0] == 1:
    st.warning("‚ö†Ô∏è Warning! Potential issue detected.")